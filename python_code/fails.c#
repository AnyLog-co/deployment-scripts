using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Dynics.Arrow;
using Newtonsoft.Json;

public class Script
{
    public static readonly string timestampColumn = "Timestamp";
    private static readonly string columnName = "WaterPlant";
    public static async Task ExecuteAsync(IScriptContext context, RecordBatch recordBatch, CancellationToken cancellationToken)
    {
        // Get timestamp
        var tsColumn = recordBatch.Column(timestampColumn) as TimestampArray;
        long? epochTimestamp = tsColumn.GetValue(0).Value;

        // Convert epoch to DateTimeOffset
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds(epochTimestamp.Value);

        // Format the DateTimeOffset to ISO 8601 string
        string formattedTimestamp = dateTimeOffset.ToString("yyyy-MM-dd HH:mm:ss.fff");

        // New record builder
        var builder = new RecordBatch.Builder();

        // For all fields
        for (var i = 0; i < recordBatch.Schema.Fields.Count; i++)
        {
            // Get the field schema
            var field = recordBatch.Schema.GetFieldByIndex(i);

            // Skip the timestamp column
            if (field.Name == timestampColumn)
                continue;

            // Add column to new record
            var array = recordBatch.Column(i);
            builder.Append(field, array);
        }

        // Append formatted timestamp as a single string entry
        builder.Append(timestampColumn, false, new StringArray.Builder().Append(formattedTimestamp).Build());

        // Build the new record batch
        var newRecordBatch = builder.Build();

        // Serialize the record batch to JSON for other uses (optional)
        var recordDict = new Dictionary<string, object>();

        for (var i = 0; i < newRecordBatch.Schema.Fields.Count; i++)
        {
            var field = newRecordBatch.Schema.GetFieldByIndex(i);
            var array = newRecordBatch.Column(i);
            var values = new List<object>();

            for (int j = 0; j < array.Length; j++)
            {
                values.Add(array.GetValue(j));
            }

            recordDict[field.Name] = values;
        }

        string json = JsonConvert.SerializeObject(recordDict, Formatting.Indented);

        // (Optional) Log or use the JSON string as needed
        Console.WriteLine(json);

        // Emit the new record batch
        await context.EmitAsync(newRecordBatch);
    }
}